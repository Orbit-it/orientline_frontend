{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect } from \"react\";\nimport { Notifications } from \"expo\";\nimport * as Permissions from \"expo-permissions\";\nimport expoPushTokensApi from \"../api/expoPushTokens\";\nexport default useNotifications = function useNotifications(notificationListener) {\n  useEffect(function () {\n    registerForPushNotifications();\n    if (notificationListener) Notifications.addListener(notificationListener);\n  }, []);\n\n  var registerForPushNotifications = function registerForPushNotifications() {\n    var permission, token;\n    return _regeneratorRuntime.async(function registerForPushNotifications$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n          case 3:\n            permission = _context.sent;\n\n            if (permission.granted) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 8:\n            token = _context.sent;\n            expoPushTokensApi.register(token);\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(\"Error getting a push token\", _context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n};","map":{"version":3,"sources":["C:/Users/Mansour/Desktop/OrientLine/app/app/hooks/useNotifications.js"],"names":["useEffect","Notifications","Permissions","expoPushTokensApi","useNotifications","notificationListener","registerForPushNotifications","addListener","askAsync","NOTIFICATIONS","permission","granted","getExpoPushTokenAsync","token","register","console","log"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,aAAT,QAA8B,MAA9B;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AAEA,OAAOC,iBAAP;AAEA,eAAeC,gBAAgB,GAAG,0BAACC,oBAAD,EAA0B;AAC3DL,EAAAA,SAAS,CAAC,YAAM;AACfM,IAAAA,4BAA4B;AAE5B,QAAID,oBAAJ,EACCJ,aAAa,CAACM,WAAd,CAA0BF,oBAA1B;AACD,GALQ,EAKN,EALM,CAAT;;AAOA,MAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEVJ,WAAW,CAACM,QAAZ,CACxBN,WAAW,CAACO,aADY,CAFU;;AAAA;AAE7BC,YAAAA,UAF6B;;AAAA,gBAK9BA,UAAU,CAACC,OALmB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,6CAOfV,aAAa,CAACW,qBAAd,EAPe;;AAAA;AAO7BC,YAAAA,KAP6B;AAQnCV,YAAAA,iBAAiB,CAACW,QAAlB,CAA2BD,KAA3B;AARmC;AAAA;;AAAA;AAAA;AAAA;AAUnCE,YAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;;AAVmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;AAaA,CArBD","sourcesContent":["import { useEffect } from \"react\";\nimport { Notifications } from \"expo\";\nimport * as Permissions from \"expo-permissions\";\n\nimport expoPushTokensApi from \"../api/expoPushTokens\";\n\nexport default useNotifications = (notificationListener) => {\n\tuseEffect(() => {\n\t\tregisterForPushNotifications();\n\n\t\tif (notificationListener)\n\t\t\tNotifications.addListener(notificationListener);\n\t}, []);\n\n\tconst registerForPushNotifications = async () => {\n\t\ttry {\n\t\t\tconst permission = await Permissions.askAsync(\n\t\t\t\tPermissions.NOTIFICATIONS\n\t\t\t);\n\t\t\tif (!permission.granted) return;\n\n\t\t\tconst token = await Notifications.getExpoPushTokenAsync();\n\t\t\texpoPushTokensApi.register(token);\n\t\t} catch (error) {\n\t\t\tconsole.log(\"Error getting a push token\", error);\n\t\t}\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}