{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/wcandillon/tmp/react-native-expo-image-cache/src/Image.tsx\";\nimport * as _ from \"lodash\";\nimport * as React from \"react\";\nimport RNImage from \"react-native-web/dist/exports/Image\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { BlurView } from \"expo-blur\";\nimport CacheManager from \"./CacheManager\";\n\nvar Image = function (_React$Component) {\n  _inherits(Image, _React$Component);\n\n  function Image() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Image);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Image)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.mounted = true;\n    _this.state = {\n      uri: undefined,\n      intensity: new Animated.Value(100)\n    };\n    return _this;\n  }\n\n  _createClass(Image, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.load(this.props);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this$props = this.props,\n          preview = _this$props.preview,\n          transitionDuration = _this$props.transitionDuration,\n          newURI = _this$props.uri;\n      var _this$state = this.state,\n          uri = _this$state.uri,\n          intensity = _this$state.intensity;\n\n      if (newURI !== prevProps.uri) {\n        this.load(this.props);\n      } else if (uri && preview && prevState.uri === undefined) {\n        Animated.timing(intensity, {\n          duration: transitionDuration,\n          toValue: 0,\n          useNativeDriver: Platform.OS === \"android\"\n        }).start();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.mounted = false;\n    }\n  }, {\n    key: \"load\",\n    value: function load(_ref) {\n      var uri, _ref$options, options, onError, path;\n\n      return _regeneratorRuntime.async(function load$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              uri = _ref.uri, _ref$options = _ref.options, options = _ref$options === void 0 ? {} : _ref$options, onError = _ref.onError;\n\n              if (!uri) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(CacheManager.get(uri, options).getPath());\n\n            case 5:\n              path = _context.sent;\n\n              if (this.mounted) {\n                if (path) {\n                  this.setState({\n                    uri: path\n                  });\n                } else {\n                  onError({\n                    nativeEvent: {\n                      error: new Error(\"Could not load image\")\n                    }\n                  });\n                }\n              }\n\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](2);\n              onError({\n                nativeEvent: {\n                  error: _context.t0\n                }\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[2, 9]]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          preview = _this$props2.preview,\n          style = _this$props2.style,\n          defaultSource = _this$props2.defaultSource,\n          tint = _this$props2.tint,\n          otherProps = _objectWithoutProperties(_this$props2, [\"preview\", \"style\", \"defaultSource\", \"tint\"]);\n\n      var _this$state2 = this.state,\n          uri = _this$state2.uri,\n          intensity = _this$state2.intensity;\n      var isImageReady = !!uri;\n      var opacity = intensity.interpolate({\n        inputRange: [0, 100],\n        outputRange: [0, 0.5]\n      });\n      var flattenedStyle = StyleSheet.flatten(style);\n      var computedStyle = [StyleSheet.absoluteFill, _.transform(_.pickBy(flattenedStyle, function (_val, key) {\n        return propsToCopy.indexOf(key) !== -1;\n      }), function (result, value, key) {\n        return _extends(result, _defineProperty({}, key, value - (flattenedStyle.borderWidth || 0)));\n      })];\n      return React.createElement(View, _extends({\n        style: style\n      }, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        }\n      }), !!defaultSource && !isImageReady && React.createElement(RNImage, _extends({\n        source: defaultSource,\n        style: computedStyle\n      }, otherProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        }\n      })), !!preview && React.createElement(RNImage, _extends({\n        source: preview,\n        style: computedStyle,\n        blurRadius: Platform.OS === \"android\" ? 0.5 : 0\n      }, otherProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        }\n      })), isImageReady && React.createElement(RNImage, _extends({\n        source: {\n          uri: uri\n        },\n        style: computedStyle\n      }, otherProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        }\n      })), !!preview && Platform.OS === \"ios\" && React.createElement(AnimatedBlurView, _extends({\n        style: computedStyle\n      }, {\n        intensity: intensity,\n        tint: tint\n      }, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        }\n      })), !!preview && Platform.OS === \"android\" && React.createElement(Animated.View, {\n        style: [computedStyle, {\n          backgroundColor: tint === \"dark\" ? black : white,\n          opacity: opacity\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        }\n      }));\n    }\n  }]);\n\n  return Image;\n}(React.Component);\n\nImage.defaultProps = {\n  transitionDuration: 300,\n  tint: \"dark\",\n  onError: function onError() {}\n};\nexport { Image as default };\nvar black = \"black\";\nvar white = \"white\";\nvar propsToCopy = [\"borderRadius\", \"borderBottomLeftRadius\", \"borderBottomRightRadius\", \"borderTopLeftRadius\", \"borderTopRightRadius\"];\nvar AnimatedBlurView = Animated.createAnimatedComponent(BlurView);","map":{"version":3,"sources":["Image.tsx"],"names":["Image","React","Component","mounted","defaultProps","transitionDuration","tint","onError","state","uri","intensity","Animated","prevProps","prevState","preview","newURI","duration","toValue","useNativeDriver","Platform","options","path","CacheManager","nativeEvent","error","style","defaultSource","otherProps","isImageReady","opacity","inputRange","outputRange","flattenedStyle","StyleSheet","computedStyle","_","propsToCopy","value","backgroundColor","black","white","AnimatedBlurView"],"mappings":"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","sourcesContent":["// @flow\nimport * as _ from \"lodash\";\nimport * as React from \"react\";\nimport {\n  Image as RNImage,\n  Animated,\n  StyleSheet,\n  View,\n  Platform,\n  ImageStyle,\n  ImageURISource,\n  ImageSourcePropType,\n  StyleProp\n} from \"react-native\";\nimport { BlurView } from \"expo-blur\";\n\nimport CacheManager, { DownloadOptions } from \"./CacheManager\";\n\ninterface ImageProps {\n  style?: StyleProp<ImageStyle>;\n  defaultSource?: ImageURISource | number;\n  preview?: ImageSourcePropType;\n  options?: DownloadOptions;\n  uri: string;\n  transitionDuration?: number;\n  tint?: \"dark\" | \"light\";\n  onError: (error: { nativeEvent: { error: Error } }) => void;\n}\n\ninterface ImageState {\n  uri: string | undefined;\n  intensity: Animated.Value;\n}\n\nexport default class Image extends React.Component<ImageProps, ImageState> {\n  mounted = true;\n\n  static defaultProps = {\n    transitionDuration: 300,\n    tint: \"dark\",\n    onError: () => {}\n  };\n\n  state = {\n    uri: undefined,\n    intensity: new Animated.Value(100)\n  };\n\n  componentDidMount() {\n    this.load(this.props);\n  }\n\n  componentDidUpdate(prevProps: ImageProps, prevState: ImageState) {\n    const { preview, transitionDuration, uri: newURI } = this.props;\n    const { uri, intensity } = this.state;\n    if (newURI !== prevProps.uri) {\n      this.load(this.props);\n    } else if (uri && preview && prevState.uri === undefined) {\n      Animated.timing(intensity, {\n        duration: transitionDuration,\n        toValue: 0,\n        useNativeDriver: Platform.OS === \"android\"\n      }).start();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  async load({ uri, options = {}, onError }: ImageProps): Promise<void> {\n    if (uri) {\n      try {\n        const path = await CacheManager.get(uri, options).getPath();\n        if (this.mounted) {\n          if (path) {\n            this.setState({ uri: path });\n          } else {\n            onError({ nativeEvent: { error: new Error(\"Could not load image\") } });\n          }\n        }\n      } catch (error) {\n        onError({ nativeEvent: { error } });\n      }\n    }\n  }\n\n  render() {\n    const { preview, style, defaultSource, tint, ...otherProps } = this.props;\n    const { uri, intensity } = this.state;\n    const isImageReady = !!uri;\n    const opacity = intensity.interpolate({\n      inputRange: [0, 100],\n      outputRange: [0, 0.5]\n    });\n    const flattenedStyle = StyleSheet.flatten(style);\n    const computedStyle: StyleProp<ImageStyle> = [\n      StyleSheet.absoluteFill,\n      _.transform(_.pickBy(flattenedStyle, (_val, key) => propsToCopy.indexOf(key) !== -1), (result, value: any, key) =>\n        Object.assign(result, { [key]: value - (flattenedStyle.borderWidth || 0) })\n      )\n    ];\n    return (\n      <View {...{ style }}>\n        {!!defaultSource && !isImageReady && <RNImage source={defaultSource} style={computedStyle} {...otherProps} />}\n        {!!preview && (\n          <RNImage\n            source={preview}\n            style={computedStyle}\n            blurRadius={Platform.OS === \"android\" ? 0.5 : 0}\n            {...otherProps}\n          />\n        )}\n        {isImageReady && <RNImage source={{ uri }} style={computedStyle} {...otherProps} />}\n        {!!preview && Platform.OS === \"ios\" && <AnimatedBlurView style={computedStyle} {...{ intensity, tint }} />}\n        {!!preview && Platform.OS === \"android\" && (\n          <Animated.View style={[computedStyle, { backgroundColor: tint === \"dark\" ? black : white, opacity }]} />\n        )}\n      </View>\n    );\n  }\n}\n\nconst black = \"black\";\nconst white = \"white\";\nconst propsToCopy = [\n  \"borderRadius\",\n  \"borderBottomLeftRadius\",\n  \"borderBottomRightRadius\",\n  \"borderTopLeftRadius\",\n  \"borderTopRightRadius\"\n];\nconst AnimatedBlurView = Animated.createAnimatedComponent(BlurView);\n"]},"metadata":{},"sourceType":"module"}