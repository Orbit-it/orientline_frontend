{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport * as _ from \"lodash\";\nimport * as FileSystem from \"expo-file-system\";\nimport SHA1 from \"crypto-js/sha1\";\nvar BASE_DIR = FileSystem.cacheDirectory + \"expo-image-cache/\";\nexport var CacheEntry = function () {\n  function CacheEntry(uri, options) {\n    _classCallCheck(this, CacheEntry);\n\n    this.uri = uri;\n    this.options = options;\n  }\n\n  _createClass(CacheEntry, [{\n    key: \"getPath\",\n    value: function getPath() {\n      var uri, options, _ref, path, exists, tmpPath, result;\n\n      return _regeneratorRuntime.async(function getPath$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              uri = this.uri, options = this.options;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(getCacheEntry(uri));\n\n            case 3:\n              _ref = _context.sent;\n              path = _ref.path;\n              exists = _ref.exists;\n              tmpPath = _ref.tmpPath;\n\n              if (!exists) {\n                _context.next = 9;\n                break;\n              }\n\n              return _context.abrupt(\"return\", path);\n\n            case 9:\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(FileSystem.createDownloadResumable(uri, tmpPath, options).downloadAsync());\n\n            case 11:\n              result = _context.sent;\n\n              if (!(result && result.status !== 200)) {\n                _context.next = 14;\n                break;\n              }\n\n              return _context.abrupt(\"return\", undefined);\n\n            case 14:\n              _context.next = 16;\n              return _regeneratorRuntime.awrap(FileSystem.moveAsync({\n                from: tmpPath,\n                to: path\n              }));\n\n            case 16:\n              return _context.abrupt(\"return\", path);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return CacheEntry;\n}();\n\nvar CacheManager = function () {\n  function CacheManager() {\n    _classCallCheck(this, CacheManager);\n  }\n\n  _createClass(CacheManager, null, [{\n    key: \"get\",\n    value: function get(uri, options) {\n      if (!CacheManager.entries[uri]) {\n        CacheManager.entries[uri] = new CacheEntry(uri, options);\n      }\n\n      return CacheManager.entries[uri];\n    }\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      return _regeneratorRuntime.async(function clearCache$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(FileSystem.deleteAsync(BASE_DIR, {\n                idempotent: true\n              }));\n\n            case 2:\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(FileSystem.makeDirectoryAsync(BASE_DIR));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getCacheSize\",\n    value: function getCacheSize() {\n      var result;\n      return _regeneratorRuntime.async(function getCacheSize$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(BASE_DIR));\n\n            case 2:\n              result = _context3.sent;\n\n              if (result.exists) {\n                _context3.next = 5;\n                break;\n              }\n\n              throw new Error(BASE_DIR + \" not found\");\n\n            case 5:\n              return _context3.abrupt(\"return\", result.size);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return CacheManager;\n}();\n\nCacheManager.entries = {};\nexport { CacheManager as default };\n\nvar getCacheEntry = function getCacheEntry(uri) {\n  var filename, ext, path, tmpPath, info, exists;\n  return _regeneratorRuntime.async(function getCacheEntry$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          filename = uri.substring(uri.lastIndexOf(\"/\"), uri.indexOf(\"?\") === -1 ? uri.length : uri.indexOf(\"?\"));\n          ext = filename.indexOf(\".\") === -1 ? \".jpg\" : filename.substring(filename.lastIndexOf(\".\"));\n          path = \"\" + BASE_DIR + SHA1(uri) + ext;\n          tmpPath = \"\" + BASE_DIR + SHA1(uri) + \"-\" + _.uniqueId() + ext;\n          _context4.prev = 4;\n          _context4.next = 7;\n          return _regeneratorRuntime.awrap(FileSystem.makeDirectoryAsync(BASE_DIR));\n\n        case 7:\n          _context4.next = 11;\n          break;\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](4);\n\n        case 11:\n          _context4.next = 13;\n          return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(path));\n\n        case 13:\n          info = _context4.sent;\n          exists = info.exists;\n          return _context4.abrupt(\"return\", {\n            exists: exists,\n            path: path,\n            tmpPath: tmpPath\n          });\n\n        case 16:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[4, 9]]);\n};","map":{"version":3,"sources":["CacheManager.ts"],"names":["BASE_DIR","FileSystem","CacheEntry","uri","options","path","exists","tmpPath","getCacheEntry","result","from","to","CacheManager","entries","idempotent","size","filename","ext","SHA1","_","info"],"mappings":"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","sourcesContent":["// @flow\nimport * as _ from \"lodash\";\nimport * as FileSystem from \"expo-file-system\";\nimport SHA1 from \"crypto-js/sha1\";\n\nexport interface DownloadOptions {\n  md5?: boolean;\n  headers?: { [name: string]: string };\n}\n\nconst BASE_DIR = `${FileSystem.cacheDirectory}expo-image-cache/`;\n\nexport class CacheEntry {\n  uri: string;\n\n  options: DownloadOptions;\n\n  constructor(uri: string, options: DownloadOptions) {\n    this.uri = uri;\n    this.options = options;\n  }\n\n  async getPath(): Promise<string | undefined> {\n    const { uri, options } = this;\n    const { path, exists, tmpPath } = await getCacheEntry(uri);\n    if (exists) {\n      return path;\n    }\n    const result = await FileSystem.createDownloadResumable(uri, tmpPath, options).downloadAsync();\n    // If the image download failed, we don't cache anything\n    if (result && result.status !== 200) {\n      return undefined;\n    }\n    await FileSystem.moveAsync({ from: tmpPath, to: path });\n    return path;\n  }\n}\n\nexport default class CacheManager {\n  static entries: { [uri: string]: CacheEntry } = {};\n\n  static get(uri: string, options: DownloadOptions): CacheEntry {\n    if (!CacheManager.entries[uri]) {\n      CacheManager.entries[uri] = new CacheEntry(uri, options);\n    }\n    return CacheManager.entries[uri];\n  }\n\n  static async clearCache(): Promise<void> {\n    await FileSystem.deleteAsync(BASE_DIR, { idempotent: true });\n    await FileSystem.makeDirectoryAsync(BASE_DIR);\n  }\n\n  static async getCacheSize(): Promise<number> {\n    const result = await FileSystem.getInfoAsync(BASE_DIR);\n    if (!result.exists) {\n      throw new Error(`${BASE_DIR} not found`);\n    }\n    return result.size;\n  }\n}\n\nconst getCacheEntry = async (uri: string): Promise<{ exists: boolean; path: string; tmpPath: string }> => {\n  const filename = uri.substring(uri.lastIndexOf(\"/\"), uri.indexOf(\"?\") === -1 ? uri.length : uri.indexOf(\"?\"));\n  const ext = filename.indexOf(\".\") === -1 ? \".jpg\" : filename.substring(filename.lastIndexOf(\".\"));\n  const path = `${BASE_DIR}${SHA1(uri)}${ext}`;\n  const tmpPath = `${BASE_DIR}${SHA1(uri)}-${_.uniqueId()}${ext}`;\n  // TODO: maybe we don't have to do this every time\n  try {\n    await FileSystem.makeDirectoryAsync(BASE_DIR);\n  } catch (e) {\n    // do nothing\n  }\n  const info = await FileSystem.getInfoAsync(path);\n  const { exists } = info;\n  return { exists, path, tmpPath };\n};\n"]},"metadata":{},"sourceType":"module"}