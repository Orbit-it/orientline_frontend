{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mansour\\\\Desktop\\\\OrientLine\\\\app\\\\app\\\\components\\\\ContactSellerForm.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { Notifications } from \"expo\";\nimport * as Yup from \"yup\";\nimport { Form, FormField, SubmitButton } from \"./forms\";\nimport messagesApi from \"../api/messages\";\n\nfunction ContactSellerForm(_ref) {\n  var listing = _ref.listing;\n\n  var handleSubmit = function handleSubmit(_ref2, _ref3) {\n    var message, resetForm, result;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            message = _ref2.message;\n            resetForm = _ref3.resetForm;\n            Keyboard.dismiss();\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(messagesApi.send(message, listing.id));\n\n          case 5:\n            result = _context.sent;\n\n            if (result.ok) {\n              _context.next = 9;\n              break;\n            }\n\n            console.log(\"Error\", result);\n            return _context.abrupt(\"return\", Alert.alert(\"Error\", \"Could not send the message to the seller.\"));\n\n          case 9:\n            resetForm();\n            Notifications.presentLocalNotificationAsync({\n              title: \"Awesome!\",\n              body: \"Your message was sent to the seller.\"\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Form, {\n    initialValues: {\n      message: \"\"\n    },\n    onSubmit: handleSubmit,\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 3\n    }\n  }, React.createElement(FormField, {\n    maxLength: 255,\n    multiline: true,\n    name: \"message\",\n    numberOfLines: 3,\n    placeholder: \"Message...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }\n  }), React.createElement(SubmitButton, {\n    title: \"Contact Seller\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }\n  }));\n}\n\nvar validationSchema = Yup.object().shape({\n  message: Yup.string().required().min(1).label(\"Message\")\n});\nexport default ContactSellerForm;","map":{"version":3,"sources":["C:/Users/Mansour/Desktop/OrientLine/app/app/components/ContactSellerForm.js"],"names":["React","Notifications","Yup","Form","FormField","SubmitButton","messagesApi","ContactSellerForm","listing","handleSubmit","message","resetForm","Keyboard","dismiss","send","id","result","ok","console","log","Alert","alert","presentLocalNotificationAsync","title","body","validationSchema","object","shape","string","required","min","label"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,aAAT,QAA8B,MAA9B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,YAA1B;AACA,OAAOC,WAAP;;AAEA,SAASC,iBAAT,OAAwC;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AACvC,MAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,OAAT,SAASA,OAAT;AAAsBC,YAAAA,SAAtB,SAAsBA,SAAtB;AACpBC,YAAAA,QAAQ,CAACC,OAAT;AADoB;AAAA,6CAGCP,WAAW,CAACQ,IAAZ,CAAiBJ,OAAjB,EAA0BF,OAAO,CAACO,EAAlC,CAHD;;AAAA;AAGdC,YAAAA,MAHc;;AAAA,gBAKfA,MAAM,CAACC,EALQ;AAAA;AAAA;AAAA;;AAMnBC,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,MAArB;AANmB,6CAOZI,KAAK,CAACC,KAAN,CACN,OADM,EAEN,2CAFM,CAPY;;AAAA;AAapBV,YAAAA,SAAS;AAETV,YAAAA,aAAa,CAACqB,6BAAd,CAA4C;AAC3CC,cAAAA,KAAK,EAAE,UADoC;AAE3CC,cAAAA,IAAI,EAAE;AAFqC,aAA5C;;AAfoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAqBA,SACC,oBAAC,IAAD;AACC,IAAA,aAAa,EAAE;AAAEd,MAAAA,OAAO,EAAE;AAAX,KADhB;AAEC,IAAA,QAAQ,EAAED,YAFX;AAGC,IAAA,gBAAgB,EAAEgB,gBAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKC,oBAAC,SAAD;AACC,IAAA,SAAS,EAAE,GADZ;AAEC,IAAA,SAAS,MAFV;AAGC,IAAA,IAAI,EAAC,SAHN;AAIC,IAAA,aAAa,EAAE,CAJhB;AAKC,IAAA,WAAW,EAAC,YALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALD,EAYC,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAC,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZD,CADD;AAgBA;;AAED,IAAMA,gBAAgB,GAAGvB,GAAG,CAACwB,MAAJ,GAAaC,KAAb,CAAmB;AAC3CjB,EAAAA,OAAO,EAAER,GAAG,CAAC0B,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B,EAA+BC,KAA/B,CAAqC,SAArC;AADkC,CAAnB,CAAzB;AAIA,eAAexB,iBAAf","sourcesContent":["import React from \"react\";\nimport { Alert, Keyboard } from \"react-native\";\nimport { Notifications } from \"expo\";\nimport * as Yup from \"yup\";\n\nimport { Form, FormField, SubmitButton } from \"./forms\";\nimport messagesApi from \"../api/messages\";\n\nfunction ContactSellerForm({ listing }) {\n\tconst handleSubmit = async ({ message }, { resetForm }) => {\n\t\tKeyboard.dismiss();\n\n\t\tconst result = await messagesApi.send(message, listing.id);\n\n\t\tif (!result.ok) {\n\t\t\tconsole.log(\"Error\", result);\n\t\t\treturn Alert.alert(\n\t\t\t\t\"Error\",\n\t\t\t\t\"Could not send the message to the seller.\"\n\t\t\t);\n\t\t}\n\n\t\tresetForm();\n\n\t\tNotifications.presentLocalNotificationAsync({\n\t\t\ttitle: \"Awesome!\",\n\t\t\tbody: \"Your message was sent to the seller.\",\n\t\t});\n\t};\n\n\treturn (\n\t\t<Form\n\t\t\tinitialValues={{ message: \"\" }}\n\t\t\tonSubmit={handleSubmit}\n\t\t\tvalidationSchema={validationSchema}\n\t\t>\n\t\t\t<FormField\n\t\t\t\tmaxLength={255}\n\t\t\t\tmultiline\n\t\t\t\tname=\"message\"\n\t\t\t\tnumberOfLines={3}\n\t\t\t\tplaceholder=\"Message...\"\n\t\t\t/>\n\t\t\t<SubmitButton title=\"Contact Seller\" />\n\t\t</Form>\n\t);\n}\n\nconst validationSchema = Yup.object().shape({\n\tmessage: Yup.string().required().min(1).label(\"Message\"),\n});\n\nexport default ContactSellerForm;\n"]},"metadata":{},"sourceType":"module"}