{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { create } from \"apisauce\";\nimport authStorage from \"../auth/storage\";\nimport cache from \"../utility/cache\";\nimport settings from \"../config/settings\";\nvar apiClient = create({\n  baseURL: settings.apiUrl\n});\napiClient.addAsyncRequestTransform(function _callee(request) {\n  var authToken;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(authStorage.getToken());\n\n        case 2:\n          authToken = _context.sent;\n\n          if (authToken) {\n            _context.next = 5;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 5:\n          request.headers[\"x-auth-token\"] = authToken;\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nvar get = apiClient.get;\n\napiClient.get = function _callee2(url, params, axiosConfig) {\n  var response, data;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(get(url, params, axiosConfig));\n\n        case 2:\n          response = _context2.sent;\n\n          if (!response.ok) {\n            _context2.next = 6;\n            break;\n          }\n\n          cache.store(url, response.data);\n          return _context2.abrupt(\"return\", response);\n\n        case 6:\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(cache.get(url));\n\n        case 8:\n          data = _context2.sent;\n          return _context2.abrupt(\"return\", data ? {\n            ok: true,\n            data: data\n          } : response);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default apiClient;","map":{"version":3,"sources":["C:/Users/Mansour/Desktop/OrientLine/app/app/api/client.js"],"names":["create","authStorage","cache","settings","apiClient","baseURL","apiUrl","addAsyncRequestTransform","request","getToken","authToken","headers","get","url","params","axiosConfig","response","ok","store","data"],"mappings":";AAAA,SAASA,MAAT,QAAuB,UAAvB;AAEA,OAAOC,WAAP;AACA,OAAOC,KAAP;AACA,OAAOC,QAAP;AAEA,IAAMC,SAAS,GAAGJ,MAAM,CAAC;AACxBK,EAAAA,OAAO,EAAEF,QAAQ,CAACG;AADM,CAAD,CAAxB;AAIAF,SAAS,CAACG,wBAAV,CAAmC,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACVP,WAAW,CAACQ,QAAZ,EADU;;AAAA;AAC5BC,UAAAA,SAD4B;;AAAA,cAE7BA,SAF6B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGlCF,UAAAA,OAAO,CAACG,OAAR,CAAgB,cAAhB,IAAkCD,SAAlC;;AAHkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnC;AAMA,IAAME,GAAG,GAAGR,SAAS,CAACQ,GAAtB;;AAEAR,SAAS,CAACQ,GAAV,GAAgB,kBAAOC,GAAP,EAAYC,MAAZ,EAAoBC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACQH,GAAG,CAACC,GAAD,EAAMC,MAAN,EAAcC,WAAd,CADX;;AAAA;AACTC,UAAAA,QADS;;AAAA,eAGXA,QAAQ,CAACC,EAHE;AAAA;AAAA;AAAA;;AAIdf,UAAAA,KAAK,CAACgB,KAAN,CAAYL,GAAZ,EAAiBG,QAAQ,CAACG,IAA1B;AAJc,4CAKPH,QALO;;AAAA;AAAA;AAAA,2CAQId,KAAK,CAACU,GAAN,CAAUC,GAAV,CARJ;;AAAA;AAQTM,UAAAA,IARS;AAAA,4CASRA,IAAI,GAAG;AAAEF,YAAAA,EAAE,EAAE,IAAN;AAAYE,YAAAA,IAAI,EAAJA;AAAZ,WAAH,GAAwBH,QATpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AAYA,eAAeZ,SAAf","sourcesContent":["import { create } from \"apisauce\";\n\nimport authStorage from \"../auth/storage\";\nimport cache from \"../utility/cache\";\nimport settings from \"../config/settings\";\n\nconst apiClient = create({\n\tbaseURL: settings.apiUrl,\n});\n\napiClient.addAsyncRequestTransform(async (request) => {\n\tconst authToken = await authStorage.getToken();\n\tif (!authToken) return;\n\trequest.headers[\"x-auth-token\"] = authToken;\n});\n\nconst get = apiClient.get;\n\napiClient.get = async (url, params, axiosConfig) => {\n\tconst response = await get(url, params, axiosConfig);\n\n\tif (response.ok) {\n\t\tcache.store(url, response.data);\n\t\treturn response;\n\t}\n\n\tconst data = await cache.get(url);\n\treturn data ? { ok: true, data } : response;\n};\n\nexport default apiClient;\n"]},"metadata":{},"sourceType":"module"}