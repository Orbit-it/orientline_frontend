{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mansour\\\\Desktop\\\\OrientLine\\\\app\\\\app\\\\screens\\\\LoginScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport * as Yup from \"yup\";\nimport Screen from \"../components/Screen\";\nimport { ErrorMessage, Form, FormField, SubmitButton } from \"../components/forms\";\nimport authApi from \"../api/auth\";\nimport useAuth from \"../auth/useAuth\";\nvar validationSchema = Yup.object().shape({\n  email: Yup.string().required().label(\"Email\"),\n  password: Yup.string().required().min(4).label(\"Password\")\n});\n\nfunction LoginScreen(props) {\n  var auth = useAuth();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loginFailed = _useState2[0],\n      setLoginFailed = _useState2[1];\n\n  var handleSubmit = function handleSubmit(_ref) {\n    var email, password, result;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = _ref.email, password = _ref.password;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(authApi.login(email, password));\n\n          case 3:\n            result = _context.sent;\n\n            if (result.ok) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", setLoginFailed(true));\n\n          case 6:\n            setLoginFailed(false);\n            auth.logIn(result.data);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Screen, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 3\n    }\n  }, React.createElement(Image, {\n    style: styles.logo,\n    source: require(\"../assets/orientlogo.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 4\n    }\n  }), React.createElement(Form, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: handleSubmit,\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }\n  }, React.createElement(ErrorMessage, {\n    error: \"Identifiants invalides.\",\n    visible: loginFailed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }), React.createElement(FormField, {\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    icon: \"email\",\n    name: \"email\",\n    placeholder: \"Email\",\n    textContentType: \"emailAddress\",\n    keyboardType: \"email-address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }), React.createElement(FormField, {\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    icon: \"lock\",\n    name: \"password\",\n    placeholder: \"Mot de passe\",\n    textContentType: \"password\",\n    secureTextEntry: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }), React.createElement(SubmitButton, {\n    title: \"Connexion\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  })));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    padding: 10\n  },\n  logo: {\n    resizeMode: 'contain',\n    width: 80,\n    height: 80,\n    borderRadius: 5,\n    alignSelf: \"center\",\n    marginTop: 50,\n    marginBottom: 5\n  },\n  form: {\n    width: '80%',\n    borderWidth: 1,\n    borderColor: 'blue',\n    borderRadius: 5\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["C:/Users/Mansour/Desktop/OrientLine/app/app/screens/LoginScreen.js"],"names":["React","useState","Yup","Screen","ErrorMessage","Form","FormField","SubmitButton","authApi","useAuth","validationSchema","object","shape","email","string","required","label","password","min","LoginScreen","props","auth","loginFailed","setLoginFailed","handleSubmit","login","result","ok","logIn","data","styles","container","logo","require","StyleSheet","create","padding","resizeMode","width","height","borderRadius","alignSelf","marginTop","marginBottom","form","borderWidth","borderColor"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { StyleSheet, Image } from \"react-native\";\nimport * as Yup from \"yup\";\n\nimport Screen from \"../components/Screen\";\nimport {\n\tErrorMessage,\n\tForm,\n\tFormField,\n\tSubmitButton,\n} from \"../components/forms\";\n\nimport authApi from \"../api/auth\";\nimport useAuth from \"../auth/useAuth\";\n\nconst validationSchema = Yup.object().shape({\n\temail: Yup.string().required().label(\"Email\"),\n\tpassword: Yup.string().required().min(4).label(\"Password\"),\n});\n\nfunction LoginScreen(props) {\n\tconst auth = useAuth();\n\tconst [loginFailed, setLoginFailed] = useState(false);\n\n\tconst handleSubmit = async ({ email, password }) => {\n\t\tconst result = await authApi.login(email, password);\n\t\tif (!result.ok) return setLoginFailed(true);\n\t\tsetLoginFailed(false);\n\t\tauth.logIn(result.data);\n\t};\n\n\treturn (\n\t\t<Screen style={styles.container}>\n\t\t\t<Image style={styles.logo} source={require(\"../assets/orientlogo.png\")} />\n\n\t\t\t<Form\n\t\t\t\tinitialValues={{ email: \"\", password: \"\" }}\n\t\t\t\tonSubmit={handleSubmit}\n\t\t\t\tvalidationSchema={validationSchema}\n\t\t\t>\n\t\t\t\t<ErrorMessage\n\t\t\t\t\terror=\"Identifiants invalides.\"\n\t\t\t\t\tvisible={loginFailed}\n\t\t\t\t/>\n\n\t\t\t\t<FormField\n\t\t\t\t\t\n\t\t\t\t\tautoCapitalize=\"none\"\n\t\t\t\t\tautoCorrect={false}\n\t\t\t\t\ticon=\"email\"\n\t\t\t\t\tname=\"email\"\n\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\ttextContentType=\"emailAddress\"\n\t\t\t\t\tkeyboardType=\"email-address\"\n\t\t\t\t/>\n\n\t\t\t\t<FormField\n\t\t\t\t\tautoCapitalize=\"none\"\n\t\t\t\t\tautoCorrect={false}\n\t\t\t\t\ticon=\"lock\"\n\t\t\t\t\tname=\"password\"\n\t\t\t\t\tplaceholder=\"Mot de passe\"\n\t\t\t\t\ttextContentType=\"password\"\n\t\t\t\t\tsecureTextEntry={true}\n\t\t\t\t/>\n\t\t\t\t<SubmitButton title=\"Connexion\" />\n\t\t\t</Form>\n\t\t</Screen>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tpadding: 10,\n\t},\n\tlogo: {\n\t\tresizeMode:'contain',\n\t\twidth: 80,\n\t\theight: 80,\n\t\tborderRadius: 5,\n\t\talignSelf: \"center\",\n\t\tmarginTop: 50,\n\t\tmarginBottom: 5,\n\t},\n\tform: {\n\t\twidth: '80%',\n\t\tborderWidth: 1,\n\t\tborderColor: 'blue',\n\t\tborderRadius: 5\n\t}\n});\n\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}